----
title: UXBOX source code browsing with Emacs+Cider
modified: 2018-03-12
meta_description: 
tags: Computer, Software, Linux, Functional, Clojure, ClojureScript, Server, Client, Database, GUI, Internet, JavaScript, Web, Emacs, IDE, Docker
----

The [[http://clojure.org/][Clojure]] and [[http://clojurescript.org/][ClojureScript]] application, which is impressive in its
functionality and beautifully structured source code -- [[https://github.com/uxbox/uxbox][UXBOX]] (by
*[[https://www.uxbox.io/][uxbox.io]]*).

Using Emacs+Cider for *UXBOX* source code browsing under *Linux*. To
set up [[https://www.gnu.org/software/emacs/][Emacs]] for *Clojure* and *ClojureScript* with [[https://github.com/clojure-emacs/cider][Cider]], see e.g.:
[[./2017-04-13-emacs-config.html][My Emacs configuration]].

(.more.)

* Clone the UXBOX source code
    :PROPERTIES:
    :CUSTOM_ID: clone-the-uxbox-source-code
    :END:

In a subdirectory of your own choosing execute the following:

#+BEGIN_SRC sh
  git clone https://github.com/uxbox/uxbox.git
#+END_SRC

Which clones the UXBOX source code into a newly created =uxbox=
subdirectory.

* Edit some UXBOX container files
    :PROPERTIES:
    :CUSTOM_ID: edit-some-uxbox-container-files
    :END:

We want to run emacs from inside the UXBOX Docker container (*beware
of possible security implications --check your firewall)* and have its
GUI displayed on the host's screen. To accomplish this some files need
to be changed, as follows:

** =manage.sh=
     :PROPERTIES:
     :CUSTOM_ID: manage.sh
     :END:

Change the Docker run statement in =manage.sh= to the following:

#+BEGIN_SRC sh
  docker run --net=host -ti \
           -v `pwd`:/home/uxbox/uxbox  \
           -v $HOME/.m2:/home/uxbox/.m2 \
           -v $HOME/.gitconfig:/home/uxbox/.gitconfig \
           -v $HOME/.lein:/home/uxbox/.lein \
           -p 3449:3449 -p 6060:6060 -p 9090:9090 $IMGNAME:$REV
#+END_SRC

Which uses =--net=host= to use the host's network stack inside the
container. Also maps (additionally) the =~/.lein= subdirectory. (The
=-p 3449:3449 -p 6060:6060 -p 9090:9090= are now superfluous but I've
left them in.)

** =docker/Dockerfile=
     :PROPERTIES:
     :CUSTOM_ID: dockerdockerfile
     :END:

Change =docker/Dockerfile= to include Emacs stuff (unzip to view
inside jars and the silver searcher):

#+BEGIN_SRC sh
  RUN apt-get update -yq &&  \
      apt-get install -yq bash git tmux vim openjdk-8-jdk rlwrap build-essential \
                          postgresql-9.6 postgresql-contrib-9.6 imagemagick webp \
                          sudo python unzip silversearcher-ag emacs
#+END_SRC

(The =python= package is included to prevent a =gulp= related error
--it needs python somewhere.)

** =docker/files/start.sh=
     :PROPERTIES:
     :CUSTOM_ID: dockerfilesstart.sh
     :END:

Change =docker/files/start.sh= to comment out the =figwheel= line
(we'll start it from Emacs):

#+BEGIN_SRC sh
  tmux new-window -t uxbox:1 -n 'figwheel'
  tmux select-window -t uxbox:1
  tmux send-keys -t uxbox 'cd uxbox/frontend' enter C-l
  #tmux send-keys -t uxbox 'npm run figwheel' enter
#+END_SRC

** =frontend/scripts/figwheel.clj=
     :PROPERTIES:
     :CUSTOM_ID: frontendscriptsfigwheel.clj
     :END:

Change =options= so that the local backend is used.

#+BEGIN_SRC clojure
  (def options
    {;"uxbox.config.url" "https://demo.uxbox.io/api"
     "uxbox.config.url" "http://127.0.0.1:6060/api"
     })
#+END_SRC

Note the single semicolon =;= (a double semicolon =;;= results in an
error during figwheel execution).

** =frontend/project.clj=
     :PROPERTIES:
     :CUSTOM_ID: frontendproject.clj
     :END:

Change under =Build= to add piggieback.

#+BEGIN_SRC clojure
    ;; Build
    [com.cemerick/piggieback "0.2.2"]
    [figwheel-sidecar "0.5.9" :scope "provided"]
    [environ "1.1.0"]
#+END_SRC

And add nrepl options at the end, right above =:clean-targets=:

#+BEGIN_SRC clojure
      :repl-options {:nrepl-middleware [cemerick.piggieback/wrap-cljs-repl]}
      :clean-targets ^{:protect false} ["resources/public/js" "target"]
#+END_SRC

* Build and run the Docker container
    :PROPERTIES:
    :CUSTOM_ID: build-and-run-the-docker-container
    :END:

#+BEGIN_SRC sh
  ./manage.sh build
#+END_SRC

If all went well with the build.

#+BEGIN_SRC sh
  ./manage.sh run
#+END_SRC

This will take some time to initialize.

[[../images/UXBOX-started.png]]

* In the backend tmux tab (Ctrl-b 2)
    :PROPERTIES:
    :CUSTOM_ID: in-the-backend-tmux-tab-ctrl-b-2
    :END:

Start a headless REPL for the backend source code.

#+BEGIN_SRC sh
  lein trampoline repl :headless
#+END_SRC

[[../images/UXBOX-backend.png]]

Jot down the port on which the nREPL server started.

* Create a new tmux tab (Ctrl-b c) to configure and run Emacs
    :PROPERTIES:
    :CUSTOM_ID: create-a-new-tmux-tab-ctrl-b-c-to-configure-and-run-emacs
    :END:

Use =Ctrl-b c= to create a new tmux tab.

**** Set up your Emacs configuration with Cider.
     :PROPERTIES:
     :CUSTOM_ID: set-up-your-emacs-configuration-with-cider.
     :END:

I'm using my own config, as follows:

#+BEGIN_SRC sh
  git clone https://github.com/maridonkers/emacs-config.git /home/uxbox/.emacs.d
#+END_SRC

[[../images/UXBOX-emacs-config.png]]

**** Setting up Emacs for source code browsing
     :PROPERTIES:
     :CUSTOM_ID: setting-up-emacs-for-source-code-browsing
     :END:

First enable access for X-Windows (outside the Docker container):

#+BEGIN_SRC sh
  xhost +LOCAL:
#+END_SRC

Set the =DISPLAY= variable, start the Emacs daemon and edit the
=backend/project.clj= and =frontend/project.clj= files in the =uxbox=
subdirectory.

#+BEGIN_SRC sh
  export DISPLAY=:0
  emacs --daemon
  cd uxbox
  emacsclient -nc backend/project.clj frontend/project.clj
#+END_SRC

[[../images/UXBOX-emacs-started.png]]

(If =emacs --daemon= or =emacsclient= fails then re-run =emacs
--daemon= and try again.)

* Connect to backend REPL and start the backend
    :PROPERTIES:
    :CUSTOM_ID: connect-to-backend-repl-and-start-the-backend
    :END:

In your Emacs GUI switch to the =backend/project.clj= buffer and use
=M-x cider-connect= to connect to the backend REPL. Normally you can
use the default (localhost) and also press ENTER for the port number
(which automatically finds the port number). If it doesn't work then
use the jotted down backend REPL port number.

The backend REPL should now show up in a separate Emacs buffer. Now
start the backend by typing =(start)= in the backend REPL buffer:

#+BEGIN_SRC sh
  (start)
#+END_SRC

[[../images/UXBOX-emacs-backend-repl.png]]

* In the frontend tmux tab (Ctrl-b 1)
    :PROPERTIES:
    :CUSTOM_ID: in-the-frontend-tmux-tab-ctrl-b-1
    :END:

Start a headless REPL for the frontend source code.

#+BEGIN_SRC sh
  lein trampoline repl :headless
#+END_SRC

[[../images/UXBOX-frontend.png]]

Jot down the port on which the nREPL server started.

* Connect to frontend REPL and start the frontend
    :PROPERTIES:
    :CUSTOM_ID: connect-to-frontend-repl-and-start-the-frontend
    :END:

In Emacs switch to the =frontend/project.clj= buffer and use =M-x
cider-connect= to connect to the frontend REPL. Normally you can use
the default (localhost) and also press ENTER for the port number
(which automatically finds the port number). If it doesn't work then
use the jotted down frontend REPL port number.

The frontend REPL should now show up in a separate Emacs buffer. Now
start the frontend by starting figwheel in the frontend REPL buffer:

#+BEGIN_SRC clojure
  (load-file "scripts/figwheel.clj")
#+END_SRC

[[../images/UXBOX-emacs-frontend-repl.png]]

* Load or reload the page
    :PROPERTIES:
    :CUSTOM_ID: load-or-reload-the-page
    :END:

The frontend REPL reports =Prompt will show when Figwheel connects to
your application=, which occurs when the page with the ClojureScript
code is loaded or reloaded. So (re)load the [[http://localhost:3449]]
page.

[[../images/UXBOX-browser-window.png]]

Now the Figwheel prompt is shown.

[[../images/UXBOX-emacs-frontend-repl-activated.png]]

* Browse the UXBOX source code
    :PROPERTIES:
    :CUSTOM_ID: browse-the-uxbox-source-code
    :END:

Now you're ready to browse through the UXBOX source code, using
Emacs+Cider features (such as =cider-doc= to get documentation and
=cider-find-var= to jump to a symbol).

[[../images/UXBOX-emacs-browsing-source-code.png]]

(If Emacs+Cider features don't work right away then just throw in an
=Ctrl+c+k= =cider-load-buffer= to kick it.)

* Manage repl connections
    :PROPERTIES:
    :CUSTOM_ID: manage-repl-connections
    :END:

Sometimes you require a specific repl to be the active connection for
a source file. E.g. for .cljc files. There is a section in the CIDER
documentation on this: [[https://github.com/clojure-emacs/cider/blob/master/doc/managing_connections.md][Managing Connections]].
