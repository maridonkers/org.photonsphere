----
title: NixOS Android Studio development environment (Docker based)
modified: 2023-06-28
meta_description: 
tags: Computer, Software, Internet, Docker, Android, Java, Kotlin, NixOS
----

#+OPTIONS: ^:nil

An [[https://developer.android.com/studio][Android Studio]] development environment can be somewhat cumbersome to set up under [[https://nixos.org/][NixOS]], so a solution using a [[https://www.docker.com/][Docker]] container is described in this article.

(.more.)

Normally instructions at [[https://nixos.wiki/wiki/Android][NixOS Android]] suffice, but I'm experiencing trouble with additional functionality (e.g. [[https://docs.gradle.org/current/userguide/gradle_wrapper.html][The Gradle Wrapper]]).

Hence this Docker based solution. Use the Makefile to build the container =make rebuild= and subsequently start the container =make up= and enter a development shell =make shell= which has a =~/Development= binding (change to your path if needed). From within the development shell use =/opt/android-studio/bin/studio.sh &= to start Android Studio (its GUI is displayed on your computer â€” beware: you'll probably need additional configuration if you're using [[https://wayland.freedesktop.org/][Wayland]]).

* Dockerfile

#+BEGIN_SRC dockerfile
# Android development environment.

FROM debian:bullseye

# Timezone is also in docker-compose file.
ENV HOME /root
ENV TZ Europe/Amsterdam
ENV SHELL /bin/bash

RUN apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y procps sudo curl less vim-nox zip git libssl-dev bat exa fd-find; \
    apt-get clean

RUN sed -i "s#\smain\s*\$# main contrib non-free#" /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y openjdk-17-jdk android-sdk --no-install-recommends

# Create a non-root account with your user's uid and guid.
RUN useradd -ms /bin/bash --uid 1000 --gid 100 android
# usermod -G audio,video android;

RUN echo "android ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# https://wiki.debian.org/AndroidStudio
# /opt/android-studio/bin/studio.sh &
#
COPY android-studio-2022.2.1.20-linux.tar.gz android-studio-2022.2.1.20-linux.tar.gz 
RUN mkdir -p /opt; \
    tar xvzf android-studio-2022.2.1.20-linux.tar.gz -C /opt

USER android
WORKDIR /home/android
ENV HOME /home/android

# The DISPLAY variable is required to display on your desktop.
ENV PS1='$ '
ENV DISPLAY=":0"

# For access to X-server use the following command:
#   xhost +LOCAL:
#
# RUN todo
ENTRYPOINT ["/bin/bash"]
#+END_SRC

* docker-compose.yaml
#+BEGIN_SRC docker-compose
version: "2.0"
services:
  "android":
    image: android-dev
    build: .
    stdin_open: true
    tty: true
    privileged: true
    ipc: host
    environment:
      - TZ=Europe/Amsterdam
    network_mode: host
    volumes:
      - "/tmp/.X11-unix/:/tmp/.X11-unix/:ro"
      - "~/Development:/home/android/Development:rw"
      - "~/.Xauthority:/home/android/.Xauthority:rw"
#+END_SRC

* Makefile
#+BEGIN_SRC makefile
# Brings up the Docker container, which automatically starts an Android
# development environment. The attach can be used to connect to the
# command prompt in the container, where e.g. a Ctrl-c can be used to
# force a stop.
#

NAME="docker-android-1"

all: help

up:
	xhost +LOCAL:
	docker-compose up -d

down:
	sync
	docker-compose down

# If problems persist after a force-down then manually restart Docker daemon.
force-down:
	sync
	docker rm -f $(NAME)

ls:
	docker ps -a

# https://developer.android.com/studio#downloads
# android-studio-2022.2.1.20-linux.tar.gz
rebuild:
	xhost +LOCAL:
	docker-compose build --no-cache

build:
	xhost +LOCAL:
	docker-compose build

attach:
	xhost +LOCAL:
	docker attach $(NAME)

shell:
	xhost +LOCAL:
	docker exec -it $(NAME) /bin/bash

help:
	@grep '^[^ 	#:]\+:' Makefile | sed -e 's/:[^:]*//g'
	@echo "Use make -s for silent execution (e.g. make -s ls)"
	@echo "To start Android studio use make shell for an interactive shell and type the following command:"
	@echo "/opt/android-studio/bin/studio.sh &"
#+END_SRC
